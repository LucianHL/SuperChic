# - Try to find APFEL
# Defines:
#
#  APFEL_FOUND
#  APFEL_INCLUDE_DIR
#  APFEL_INCLUDE_DIRS (not cached)
#  APFEL_LIBRARY
#  APFEL_LIBRARIES (not cached)
#  APFEL_LIBRARY_DIR (not cached)

if (APFEL_ROOT_DIR OR APFEL_DIR OR (DEFINED ENV{APFEL_ROOT_DIR}) OR (DEFINED ENV{APFEL_DIR}) )
  set(APFEL_SEARCH_DIRS "" CACHE STRING "" FORCE)
  if (APFEL_ROOT_DIR)
    list (APPEND APFEL_SEARCH_DIRS "${APFEL_ROOT_DIR}" )
  endif()
  if (APFEL_DIR)
    list (APPEND APFEL_SEARCH_DIRS "${APFEL_DIR}" )
  endif()
  if (DEFINED EVN{APFEL_ROOT_DIR})
    list (APPEND APFEL_SEARCH_DIRS "$ENV{APFEL_ROOT_DIR}" )
  endif()
  if (DEFINED ENV{APFEL_DIR})
    list (APPEND APFEL_SEARCH_DIRS "$ENV{APFEL_DIR}" )
  endif()
endif()
if (APFEL_SEARCH_DIRS)
  find_program(APFEL_CONFIG_EXE NAMES apfel-config PATHS ${APFEL_SEARCH_DIRS} PATH_SUFFIXES bin NO_DEFAULT_PATH )
  find_path(APFEL_INCLUDE_DIR APFEL/APFEL.h PATHS ${APFEL_SEARCH_DIRS} PATH_SUFFIXES include NO_DEFAULT_PATH)
  find_library(APFEL_LIBRARY NAMES APFEL PATHS ${APFEL_SEARCH_DIRS}  PATH_SUFFIXES lib lib64 NO_DEFAULT_PATH)
  find_library(APFELEVOL_LIBRARY NAMES APFELevol PATHS ${APFEL_SEARCH_DIRS}  PATH_SUFFIXES lib lib64 NO_DEFAULT_PATH)
else()
  find_program(APFEL_CONFIG_EXE NAMES apfel-config PATH_SUFFIXES bin)
  find_path(APFEL_INCLUDE_DIR APFEL/APFEL.h PATH_SUFFIXES include ../include)
  find_library(APFEL_LIBRARY NAMES APFEL PATH_SUFFIXES lib lib64 ../lib ../lib64)
  find_library(APFELEVOL_LIBRARY NAMES APFELevol PATH_SUFFIXES lib lib64 ../lib ../lib64)
endif()
set(APFEL_VERSION 0.0.0)
if (APFEL_CONFIG_EXE)
  execute_process(COMMAND ${APFEL_CONFIG_EXE} --version
                  OUTPUT_VARIABLE APFEL_VERSION
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

set(APFEL_CONFIG_CPPFLAGS_STRING)
if (APFEL_CONFIG_EXE)
  execute_process(COMMAND ${APFEL_CONFIG_EXE} --cflags
                  OUTPUT_VARIABLE APFEL_CONFIG_CPPFLAGS_STRING
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

get_filename_component(APFEL_PATH ${APFEL_INCLUDE_DIR} DIRECTORY)
mark_as_advanced(APFEL_INCLUDE_DIR APFEL_LIBRARY)

# handle the QUIETLY and REQUIRED arguments and set APFEL_FOUND to TRUE if
# all listed variables are TRUE
include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(APFEL REQUIRED_VARS APFEL_INCLUDE_DIR APFEL_LIBRARY APFELEVOL_LIBRARY APFEL_PATH 
                                  VERSION_VAR APFEL_VERSION 
                                  )


set(APFEL_LIBRARIES ${APFEL_LIBRARY})
get_filename_component(APFEL_LIBRARY_DIR ${APFEL_LIBRARY} PATH)

set(APFEL_INCLUDE_DIRS ${APFEL_INCLUDE_DIR})

if(APFEL_FOUND AND NOT TARGET APFEL::APFEL)
    add_library(APFEL::APFEL UNKNOWN IMPORTED)
    set_target_properties(APFEL::APFEL PROPERTIES
        IMPORTED_LOCATION "${APFEL_LIBRARY}"
        INTERFACE_INCLUDE_DIRECTORIES "${APFEL_INCLUDE_DIRS}"
    )
endif()
if(APFEL_FOUND AND NOT TARGET APFEL::APFELevol)
    add_library(APFEL::APFELevol UNKNOWN IMPORTED)
    set_target_properties(APFEL::APFELevol PROPERTIES
        IMPORTED_LOCATION "${APFELEVOL_LIBRARY}"
        INTERFACE_INCLUDE_DIRECTORIES "${APFEL_INCLUDE_DIRS}"
    )
endif()

mark_as_advanced(APFEL_FOUND)
