      ! this modifies the polarizations generated by genpol1 such that they apply for
! the axial case           
      subroutine genpolaxial1(in,echi1)
      implicit none
      double precision n_q,m,n_n
      integer i,in,irf
      complex*16 echi1(3,4),e1(4),e2(4),n_e1,n_e2,e1_e2,
     &     e1_norm,e2_norm
      complex*16 nb_q
      double precision pb(4),pcm(4)
      double precision pboo(4),nb(4),er(4),eim(4),erb(4),eimb(4)

      include 'zi.f'
      include 'mom.f'
      include 'axial.f'
      include 'polwrf.f'
      
      if(in.eq.6.or.in.eq.16)then
         irf=1
      elseif(in.eq.7.or.in.eq.17)then
         irf=2
      else
         irf=1
      endif
      
      n(1) = 0d0
      n(2) = 0d0
      n(3) = 1d0
      n(4) = 1d0

      m=dsqrt(q(4,in)**2-q(3,in)**2-q(2,in)**2-q(1,in)**2)
      
      do i=1,4
         pcm(i)=n(i)
      enddo
      
      do i=1,4
         pb(i)=-q(i,in)
      enddo
      pb(4)=q(4,in)

      call boost(m,pb,pcm,nb)

      nb_q=m*nb(4)
      
      n_q = n(4)*q(4,in)-n(3)*q(3,in)-n(2)*q(2,in)-n(1)*q(1,in)
      n_n = n(4)*n(4) - n(3)*n(3) - n(2)*n(2) - n(1)*n(1)
      
      do i = 1,4
         echi1(3,i) = zi*m*sqrt(1/(n_q**2-n_n*m**2))*
     &        (n(i)-q(i,in)*n_n/n_q)
         echirf(irf,3,i) = zi*m/(nb_q)*nb(i) ! NB assume n_n=0 here
      enddo
      
      
      do i = 1,4
         e1(i) = echi1(1,i)
         e2(i) = echi1(2,i)
      enddo
      
!     gram-schmidt:
      n_e1 = n(4)*echi1(1,4)-n(3)*echi1(1,3)-n(2)*echi1(1,2)
     &     -n(1)*echi1(1,1)
      n_e2 = n(4)*echi1(2,4)-n(3)*echi1(2,3)-n(2)*echi1(2,2)
     &     -n(1)*echi1(2,1)


!     make pols perpendicular to k and n
      do i = 1,4
         e1(i) = e1(i) + n_e1*(n_q*q(i,in)-m**2*n(i))
     &        /(m**2*n_n-n_q**2)
         e2(i) = e2(i) + n_e2*(n_q*q(i,in)-m**2*n(i))
     &        /(m**2*n_n-n_q**2)
      enddo
!     normalize
      e1_norm = e1(4)*dconjg(e1(4))-e1(3)*dconjg(e1(3))-
     &     e1(2)*dconjg(e1(2))-e1(1)*dconjg(e1(1))

      do i = 1,4
         e1(i) = e1(i)/zsqrt(e1_norm)
      enddo


!     - pols

      e1_e2 = e2(4)*dconjg(e1(4))-e2(3)*dconjg(e1(3))-
     &     e2(2)*dconjg(e1(2))-e2(1)*dconjg(e1(1))
      
!     make polarizations perpendicular
      
      do i = 1,4
         e2(i) = e2(i)+e1_e2*e1(i)
      enddo
      
      e2_norm = e2(4)*dconjg(e2(4))-e2(3)*dconjg(e2(3))-
     &     e2(2)*dconjg(e2(2))-e2(1)*dconjg(e2(1))

      do i = 1,4
         e2(i) = e2(i)/zsqrt(e2_norm)
      enddo


      do i = 1,4
         echi1(1,i) = e1(i)
         echi1(2,i) = e2(i)
      enddo

cccccccc W RF

      do i=1,4
         eim(i)=dimag(e1(i))
         er(i)=dreal(e1(i))
      enddo

      do i=1,4
         pcm(i)=eim(i)
      enddo
      
      call boost(m,pb,pcm,eimb)

      do i=1,4
         pcm(i)=er(i)
      enddo
      
      call boost(m,pb,pcm,erb)

      do i=1,4
         echirf(irf,1,i)=erb(i)+zi*eimb(i)
      enddo

      do i=1,4
         eim(i)=dimag(e2(i))
         er(i)=dreal(e2(i))
      enddo

      do i=1,4
         pcm(i)=eim(i)
      enddo
      
      call boost(m,pb,pcm,eimb)

      do i=1,4
         pcm(i)=er(i)
      enddo
      
      call boost(m,pb,pcm,erb)

      do i=1,4
         echirf(irf,2,i)=erb(i)+zi*eimb(i)
      enddo    

      return
      end
