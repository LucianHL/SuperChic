!       SUBROUTINE SMATRIX_aall_SM(P,ANS)
! C     
! C     Generated by MadGraph5_aMC@NLO v. 2.9.20, 2024-06-17
! C     By the MadGraph5_aMC@NLO Development Team
! C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
! C     
! C     MadGraph5_aMC@NLO StandAlone Version
! C     
! C     Returns amplitude squared summed/avg over colors
! C     and helicities
! C     for the point in phase space P(0:3,NEXTERNAL)
! C     
! C     Process: a a > ta+ ta- NP<=2 @1
! C     
!       IMPLICIT NONE
! C     
! C     CONSTANTS
! C     
!       INTEGER    NEXTERNAL
!       PARAMETER (NEXTERNAL=4)
!       INTEGER    NINITIAL
!       PARAMETER (NINITIAL=2)
!       INTEGER NPOLENTRIES
!       PARAMETER (NPOLENTRIES=(NEXTERNAL+1)*6)
!       INTEGER                 NCOMB
!       PARAMETER (             NCOMB=16)
!       INTEGER HELAVGFACTOR
!       PARAMETER (HELAVGFACTOR=4)
! C     
! C     ARGUMENTS 
! C     
!       REAL*8 P(0:3,NEXTERNAL),ANS
! CF2PY INTENT(OUT) :: ANS
! CF2PY INTENT(IN) :: P(0:3,NEXTERNAL)
! C     
! C     LOCAL VARIABLES 
! C     
!       INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
! C     put in common block to expose this variable to python interface
!       COMMON/PROCESS_NHEL_aall_SM/NHEL
!       REAL*8 T
!       REAL*8 MATRIX_aall_SM
!       INTEGER IHEL,IDEN, I, J
! C     For a 1>N process, them BEAMTWO_HELAVGFACTOR would be set to 1.
!       INTEGER BEAMS_HELAVGFACTOR(2)
!       DATA (BEAMS_HELAVGFACTOR(I),I=1,2)/2,2/
!       INTEGER JC(NEXTERNAL)
!       LOGICAL GOODHEL(NCOMB)
!       DATA NTRY/0/
!       DATA GOODHEL/NCOMB*.FALSE./

! C     
! C     GLOBAL VARIABLES
! C     
!       INTEGER USERHEL
!       COMMON/HELUSERCHOICE_aall_SM/USERHEL
!       DATA USERHEL/-1/
!       LOGICAL HELRESET_aall_SM
!       COMMON/HELRESET_aall_SM/HELRESET_aall_SM
!       DATA HELRESET_aall_SM/.TRUE./

!       DATA (NHEL(I,   1),I=1,4) /-1,-1, 1,-1/
!       DATA (NHEL(I,   2),I=1,4) /-1,-1, 1, 1/
!       DATA (NHEL(I,   3),I=1,4) /-1,-1,-1,-1/
!       DATA (NHEL(I,   4),I=1,4) /-1,-1,-1, 1/
!       DATA (NHEL(I,   5),I=1,4) /-1, 1, 1,-1/
!       DATA (NHEL(I,   6),I=1,4) /-1, 1, 1, 1/
!       DATA (NHEL(I,   7),I=1,4) /-1, 1,-1,-1/
!       DATA (NHEL(I,   8),I=1,4) /-1, 1,-1, 1/
!       DATA (NHEL(I,   9),I=1,4) / 1,-1, 1,-1/
!       DATA (NHEL(I,  10),I=1,4) / 1,-1, 1, 1/
!       DATA (NHEL(I,  11),I=1,4) / 1,-1,-1,-1/
!       DATA (NHEL(I,  12),I=1,4) / 1,-1,-1, 1/
!       DATA (NHEL(I,  13),I=1,4) / 1, 1, 1,-1/
!       DATA (NHEL(I,  14),I=1,4) / 1, 1, 1, 1/
!       DATA (NHEL(I,  15),I=1,4) / 1, 1,-1,-1/
!       DATA (NHEL(I,  16),I=1,4) / 1, 1,-1, 1/
!       DATA IDEN/ 4/

!       INTEGER POLARIZATIONS(0:NEXTERNAL,0:5)
!       COMMON/BORN_BEAM_POL_aall_SM/POLARIZATIONS
!       DATA ((POLARIZATIONS(I,J),I=0,NEXTERNAL),J=0,5)/NPOLENTRIES*-1/



! C     
! C     FUNCTIONS
! C     
!       LOGICAL IS_BORN_HEL_SELECTED

! C     ----------
! C     Check if helreset mode is on
! C     ---------
!       IF (HELRESET_aall_SM) THEN
!         NTRY = 0
!         DO I=1,NCOMB
!           GOODHEL(I) = .FALSE.
!         ENDDO
!         HELRESET_aall_SM = .FALSE.
!       ENDIF

! C     ----------
! C     BEGIN CODE
! C     ----------
!       IF(USERHEL.EQ.-1) NTRY=NTRY+1
!       DO IHEL=1,NEXTERNAL
!         JC(IHEL) = +1
!       ENDDO

! c      print*,nhel


! C     When spin-2 particles are involved, the Helicity filtering is
! C      dangerous for the 2->1 topology.
! C     This is because depending on the MC setup the initial PS points
! C      have back-to-back initial states
! C     for which some of the spin-2 helicity configurations are zero.
! C      But they are no longer zero
! C     if the point is boosted on the z-axis. Remember that HELAS
! C      helicity amplitudes are no longer
! C     lorentz invariant with expternal spin-2 particles (only the
! C      helicity sum is).
! C     For this reason, we simply remove the filterin when there is
! C      only three external particles.
!       IF (NEXTERNAL.LE.3) THEN
!         DO IHEL=1,NCOMB
!           GOODHEL(IHEL)=.TRUE.
!         ENDDO
!       ENDIF
!       ANS = 0D0
!       DO IHEL=1,NCOMB
!         IF (USERHEL.EQ.-1.OR.USERHEL.EQ.IHEL) THEN
!           IF (GOODHEL(IHEL) .OR. NTRY .LT. 20.OR.USERHEL.NE.-1) THEN
!             IF(NTRY.GE.2.AND.POLARIZATIONS(0,0).NE.
!      $       -1.AND.(.NOT.IS_BORN_HEL_SELECTED(IHEL))) THEN
!               CYCLE
!             ENDIF
!             T=MATRIX_aall_SM(P ,NHEL(1,IHEL),JC(1))
!             IF(POLARIZATIONS(0,0).EQ.-1.OR.IS_BORN_HEL_SELECTED(IHEL))
!      $        THEN
!               ANS=ANS+T
!             ENDIF
!             IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL)) THEN
!               GOODHEL(IHEL)=.TRUE.
!             ENDIF
!           ENDIF
!         ENDIF
!       ENDDO
!       ANS=ANS/DBLE(IDEN)
!       IF(USERHEL.NE.-1) THEN
!         ANS=ANS*HELAVGFACTOR
!       ELSE
!         DO J=1,NINITIAL
!           IF (POLARIZATIONS(J,0).NE.-1) THEN
!             ANS=ANS*BEAMS_HELAVGFACTOR(J)
!             ANS=ANS/POLARIZATIONS(J,0)
!           ENDIF
!         ENDDO
!       ENDIF
!       END


!       REAL*8 FUNCTION MATRIX_aall_SM(P,NHEL,IC)
! C     
! C     Generated by MadGraph5_aMC@NLO v. 2.9.20, 2024-06-17
! C     By the MadGraph5_aMC@NLO Development Team
! C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
! C     
! C     Returns amplitude squared -- no average over initial
! C      state/symmetry factor
! C     for the point with external lines W(0:6,NEXTERNAL)
! C     
! C     Process: a a > ta+ ta- NP<=2 @1
! C     
!       IMPLICIT NONE
! C     
! C     CONSTANTS
! C     
!       INTEGER    NGRAPHS
!       PARAMETER (NGRAPHS=2)
!       INTEGER    NEXTERNAL
!       PARAMETER (NEXTERNAL=4)
!       INTEGER    NWAVEFUNCS, NCOLOR
!       PARAMETER (NWAVEFUNCS=5, NCOLOR=1)
!       REAL*8     ZERO
!       PARAMETER (ZERO=0D0)

! C     
! C     ARGUMENTS 
! C     
!       REAL*8 P(0:3,NEXTERNAL)
!       INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
! C     
! C     LOCAL VARIABLES 
! C     
!       INTEGER I,J
!       COMPLEX*16 ZTEMP
!       REAL*8 CF(NCOLOR,NCOLOR)
!       COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
!       COMPLEX*16 W(20,NWAVEFUNCS)
!       COMPLEX*16 DUM0,DUM1
!       DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/
! C     
! C     GLOBAL VARIABLES
! C     
!       INCLUDE 'coupl.inc'
!       include 'wwpars.f'
!       include 'egam0.f'
!       include 'pol.f'


!       if(scpol)then
!          if(nhel(1).eq.1)then
!             matrix_aall_SM=0d0
!             return
!          endif
!          if(nhel(2).eq.1)then
!             matrix_aall_SM=0d0
!             return
!          endif
!       endif


! C     
! C     COLOR DATA
! C     
!       DATA (CF(I,  1),I=  1,  1) /1.000000000000000D+00/
! C     1 ColorOne()
! C     ----------
! C     BEGIN CODE
! C     ----------
!       CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
!       CALL VXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
!       CALL IXXXXX(P(0,3),ZERO,NHEL(3),-1*IC(3),W(1,3))
!       CALL OXXXXX(P(0,4),ZERO,NHEL(4),+1*IC(4),W(1,4))
!       CALL FFV1_2(W(1,3),W(1,1),-GC_3,ZERO,ZERO,W(1,5))
! C     Amplitude(s) for diagram number 1
!       CALL FFV1_0(W(1,5),W(1,4),W(1,2),-GC_3,AMP(1))
!       CALL FFV1_1(W(1,4),W(1,1),-GC_3,ZERO,ZERO,W(1,5))
! C     Amplitude(s) for diagram number 2
!       CALL FFV1_0(W(1,3),W(1,5),W(1,2),-GC_3,AMP(2))
!       JAMP(1)=+AMP(1)+AMP(2)

!       MATRIX_aall_SM = 0.D0
!       DO I = 1, NCOLOR
!         ZTEMP = (0.D0,0.D0)
!         DO J = 1, NCOLOR
!           ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
!         ENDDO
!         MATRIX_aall_SM = MATRIX_aall_SM+ZTEMP*DCONJG(JAMP(I))
!       ENDDO

! c      print*,nhel(1),nhel(2),nhel(3),nhel(4)
! c      print*,JAMP(1)

!       END

   
      COMPLEX*16 FUNCTION AMP_aall_SM(P,NHEL)
C     
C     Generated by MadGraph5_aMC@NLO v. 2.9.20, 2024-06-17
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared -- no average over initial
C      state/symmetry factor
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: a a > ta+ ta- NP<=2 @1
C     
            IMPLICIT NONE
C     
C     CONSTANTS
C     
            INTEGER    NEXTERNAL
            PARAMETER (NEXTERNAL=4)
            INTEGER    NWAVEFUNCS, NCOLOR
            PARAMETER (NWAVEFUNCS=5, NCOLOR=1)
            REAL*8     ZERO
            PARAMETER (ZERO=0D0)

C     
C     ARGUMENTS 
C     
            REAL*8 P(0:3,NEXTERNAL)
            INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C     
C     LOCAL VARIABLES 
C     
            INTEGER I
            REAL*8 CF(NCOLOR,NCOLOR)
            COMPLEX*16 AMP(20), JAMP(NCOLOR)
            COMPLEX*16 W(20,NWAVEFUNCS)
            COMPLEX*16 DUM0,DUM1
            DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/
C     
C     GLOBAL VARIABLES
C     
            INCLUDE 'coupl.inc'
            include 'wwpars.f'
            include 'egam0.f'
            include 'pol.f'
            include 'tau.f'

            DO I=1,4 
                  IC(i) = +1 
            ENDDO                   
      
C     
C     COLOR DATA
C     
            DATA (CF(I,  1),I=  1,  1) /1.000000000000000D+00/
C     1 ColorOne()
C     ----------
C     BEGIN CODE
C     ----------

ccccccccccccccccccccccc


            if(NPlin)then

            photi=1
            CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
            photi=2
            CALL VXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
            CALL IXXXXX(P(0,3),MDL_MTA,NHEL(3),-1*IC(3),W(1,3))
            CALL OXXXXX(P(0,4),MDL_MTA,NHEL(4),+1*IC(4),W(1,4))
            CALL FFV15_2_ll(W(1,3),W(1,1),GC_6515,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 1
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(1))  ! atau
            CALL FFV1_2_ll(W(1,3),W(1,1),-GC_3,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 2
            CALL FFV15_0_ll(W(1,5),W(1,4),W(1,2),GC_6515,AMP(2)) ! atau
C     Amplitude(s) for diagram number 3
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(3)) ! SM
C     Amplitude(s) for diagram number 4
            CALL FFV2_0_ll(W(1,5),W(1,4),W(1,2),GC_6506,AMP(4))   ! dtau
            CALL FFV2_2_ll(W(1,3),W(1,1),GC_6506,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 5
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(5))   ! dtau
            CALL FFV15_1_ll(W(1,4),W(1,1),GC_6515,MDL_MTA,ZERO,W(1,5)) 
C     Amplitude(s) for diagram number 6
            CALL FFV1_0_ll(W(1,3),W(1,5),W(1,2),-GC_3,AMP(6)) ! atau
            CALL FFV1_1_ll(W(1,4),W(1,1),-GC_3,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 7
            CALL FFV15_0_ll(W(1,3),W(1,5),W(1,2),GC_6515,AMP(7)) ! atau
C     Amplitude(s) for diagram number 8
            CALL FFV1_0_ll(W(1,3),W(1,5),W(1,2),-GC_3,AMP(8))
C     Amplitude(s) for diagram number 9
            CALL FFV2_0_ll(W(1,3),W(1,5),W(1,2),GC_6506,AMP(9)) ! dtau
            CALL FFV2_1_ll(W(1,4),W(1,1),GC_6506,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 10
            CALL FFV1_0(W(1,3),W(1,5),W(1,2),-GC_3,AMP(10))  ! dtau
            JAMP(1)=+AMP(1)+AMP(2)+AMP(3)+AMP(4)+AMP(5)+AMP(6)+AMP(7)
     &           +AMP(8)+AMP(9)+AMP(10)

            if(atau_only)JAMP(1)=AMP(1)+AMP(2)+AMP(4)+AMP(5)+AMP(6)
     &           +AMP(7)+AMP(9)+AMP(10)

cccccccccccccc

            else

            photi=1
            CALL VXXXXX(P(0,1),ZERO,NHEL(1),-1*IC(1),W(1,1))
            photi=2
            CALL VXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
            CALL IXXXXX(P(0,3),MDL_MTA,NHEL(3),-1*IC(3),W(1,3))
            CALL OXXXXX(P(0,4),MDL_MTA,NHEL(4),+1*IC(4),W(1,4))
            CALL FFV15_2_ll(W(1,3),W(1,1),GC_6515,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 1
            CALL FFV15_0_ll(W(1,5),W(1,4),W(1,2),GC_6515,AMP(1)) ! atau^2
C     Amplitude(s) for diagram number 2
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(2)) ! atau
C     Amplitude(s) for diagram number 3
            CALL FFV2_0_ll(W(1,5),W(1,4),W(1,2),GC_6506,AMP(3))  ! dtau*atau
            CALL FFV1_2_ll(W(1,3),W(1,1),-GC_3,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 4
            CALL FFV15_0_ll(W(1,5),W(1,4),W(1,2),GC_6515,AMP(4)) ! atau
C     Amplitude(s) for diagram number 5
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(5)) ! SM
C     Amplitude(s) for diagram number 6
            CALL FFV2_0_ll(W(1,5),W(1,4),W(1,2),GC_6506,AMP(6)) ! dtau
            CALL FFV2_2_ll(W(1,3),W(1,1),GC_6506,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 7
            CALL FFV15_0_ll(W(1,5),W(1,4),W(1,2),GC_6515,AMP(7)) ! dtau*atau
C     Amplitude(s) for diagram number 8
            CALL FFV1_0_ll(W(1,5),W(1,4),W(1,2),-GC_3,AMP(8)) ! dtau
C     Amplitude(s) for diagram number 9
            CALL FFV2_0_ll(W(1,5),W(1,4),W(1,2),GC_6506,AMP(9)) ! dtau^2
            CALL FFV15_1_ll(W(1,4),W(1,1),GC_6515,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 10
            CALL FFV15_0_ll(W(1,3),W(1,5),W(1,2),GC_6515,AMP(10)) ! atau^2
C     Amplitude(s) for diagram number 11
            CALL FFV1_0_ll(W(1,3),W(1,5),W(1,2),-GC_3,AMP(11)) ! atau
C     Amplitude(s) for diagram number 12
            CALL FFV2_0_ll(W(1,3),W(1,5),W(1,2),GC_6506,AMP(12)) ! dtau*atau
            CALL FFV1_1_ll(W(1,4),W(1,1),-GC_3,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 13
            CALL FFV15_0_ll(W(1,3),W(1,5),W(1,2),GC_6515,AMP(13)) ! atau
C     Amplitude(s) for diagram number 14
            CALL FFV1_0_ll(W(1,3),W(1,5),W(1,2),-GC_3,AMP(14)) ! SM
C     Amplitude(s) for diagram number 15
            CALL FFV2_0_ll(W(1,3),W(1,5),W(1,2),GC_6506,AMP(15)) ! dtau
            CALL FFV2_1_ll(W(1,4),W(1,1),GC_6506,MDL_MTA,ZERO,W(1,5))
C     Amplitude(s) for diagram number 16
            CALL FFV15_0_ll(W(1,3),W(1,5),W(1,2),GC_6515,AMP(16)) ! dtau*atau
C     Amplitude(s) for diagram number 17
            CALL FFV1_0_ll(W(1,3),W(1,5),W(1,2),-GC_3,AMP(17)) ! dtau
C     Amplitude(s) for diagram number 18
            CALL FFV2_0_ll(W(1,3),W(1,5),W(1,2),GC_6506,AMP(18)) ! dtau^2
            JAMP(1)=+AMP(1)+AMP(2)+AMP(3)+AMP(4)+AMP(5)+AMP(6)+AMP(7)
     &           +AMP(8)
     &           +AMP(9)+AMP(10)+AMP(11)+AMP(12)+AMP(13)+AMP(14)+AMP(15)
     &           +AMP(16)
     &           +AMP(17)+AMP(18)
     
            if(atau_lin)JAMP(1)=+AMP(2)+AMP(4)+AMP(6)+AMP(8)
     &      +AMP(11)+AMP(13)+AMP(15)+AMP(17)+AMP(5)+AMP(14)

            if(atau_quad)JAMP(1)=+AMP(1)+AMP(9)+AMP(10)+AMP(18)+AMP(5)
     &           +AMP(14)

            if(atau_only)then
                  JAMP(1)=+AMP(1)+AMP(2)+AMP(3)+AMP(4)+AMP(6)+AMP(7)
     &           +AMP(8)+AMP(9)+AMP(10)+AMP(11)+AMP(12)+AMP(13)+AMP(15)
     &           +AMP(16)+AMP(17)+AMP(18)

            if(atau_lin)JAMP(1)=+AMP(2)+AMP(4)+AMP(6)+AMP(8)
     &      +AMP(11)+AMP(13)+AMP(15)+AMP(17)

            if(atau_quad)JAMP(1)=+AMP(1)+AMP(9)+AMP(10)+AMP(18)

            endif


            endif

ccccccccccccccc

            AMP_aall_SM=JAMP(1)

            END
      
         
      
